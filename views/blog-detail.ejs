<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="stylesheet" href="/blog.css" />
		<link rel="stylesheet" href="/header.css">
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
		<title>Blog <%= blog.title %></title>
	</head>
	<body>
		<%- include('header') %>
		<main>
			<div id="box-header">
				<h2 id="title">#<%= blog.id %> <%= blog.title %></h2>
			</div>
			<span id="info">
				<span id="author">Author: <%= blog.author %></span> <span id="published-date"> <%= blog.published_date %></span>
			</span>
			<div id="box-main">
				<img id="image" src="<%= blog.thumbnail %>">
				<p id="description"><%= blog.description %></p>
				<p id="content"><%= blog.content %></p>
			</div>
		</main>
		<div id="comment-box">
			<div id="create-comment">
				<form>
					<div id="comment-author-container"><input id="comment-author-input" placeholder="Author" name="author"><input id="comment-to-input" placeholder="To" type="number" name="to"></div>
					<div id="create-comment-container"><textarea id="comment-input" placeholder="Comment"></textarea></div>
					<span id="button-container"><button id="post-btn">Post</button></span>
				</form>
			</div>	
			<div id="comment-list">
				<% comments.forEach(comment => { %>
					<div class="comment-box-item">
						<div class="comment-header"><h4 class="comment-id">#<%= comment.id %><% if (comment.to != 0) { %> to #<%= comment.to %><% } %></h4></div>
						<div class="comment-main"><p class="comment-content"><%= comment.content %></p></div>
						<div class="comment-footer"><p class="comment-author"><%= comment.author %></p><div class="button-footer-container"><button class="reply-btn" id="reply-<%= comment.id %>">Reply</button><button class="delete-btn" id="delete-<%= comment.id %>">Delete</button></div></div>
					</div>
				<% }) %>
			</div>		
		</div>
		
		<script>
		

		const replyBtns = document.getElementsByClassName('reply-btn')

		for (let replyBtn of replyBtns){
			
			replyBtn.addEventListener('click', e => {
				const commentId = replyBtn.id.split('-')[1]
				const toInput = document.querySelector('input[name="to"]')
				const commentContent = document.querySelector('textarea')
				commentContent.focus()
				toInput.value = commentId

			})
		}

		const deleteBtns = document.getElementsByClassName('delete-btn')

		for (let deleteBtn of deleteBtns){
			
			deleteBtn.addEventListener('click', e => {
				const commentId = deleteBtn.id.split('-')[1]
				deleteComment(commentId)
			})
		}

		async function deleteComment(id) {
				fetch(`http://localhost:3000/comments/${id}`,  {
					method: 'DELETE',
					headers: {
					'Content-Type': 'application/json',
					}

				})
				location.reload()
			}

		document.querySelector('form').addEventListener('submit', async e => {
			e.preventDefault()
			
	
			const author = document.querySelector('input[name="author"]').value
			const to = document.querySelector('input[name="to"]').value || "0"
			const content = document.querySelector('textarea').value
			const blogId = Number('<%= blog.id %>');
			const data = JSON.stringify({
				author,
				blogId,
				to,
				content
			})
			console.log(data)
			try {
				// const author = document.querySelector('input[name="author"]').value;
				// const to = document.querySelector('input[name="to"]').value || "0";
				// const content = document.querySelector('textarea').value;
				// const blogId = Number('<%= blog.id %>');
				
				// // Validate input
				// if (!author || !content) {
				// 	alert('Please fill in all required fields');
				// 	return;
				// }

				const response = await fetch(`/blogs/${blogId}/create-comment`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						author,
						blogId,
						to: Number(to),
						content
					})
				});
			
				if (!response.ok) {
					const errorData = await response.json();
					throw new Error(errorData.error || 'Failed to create comment');
				}
				location.reload()
			} catch(error) {
				console.error('Error:', error);
        		
			}

        
      
		// 	const response = await fetch(`/blogs/${blogId}/create-comment`, {
		// 		method: 'POST',
		// 		headers: {
		// 			'Content-Type': 'application/json',
		// 		},
		// 		body: JSON.stringify({
		// 		author,
		// 		blogId,
		// 		to: Number(to), 
		// 		content
        // 	})
		// 	});
		// 	// if (!response.ok){
		// 	// 	console.error("Error!")
		// 	// } else {
		// 	// 	location.reload()
		// 	// }


		// 	location.reload()
		// })
		})
		</script>
	</body>
</html>
